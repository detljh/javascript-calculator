{"version":3,"sources":["app/CalculatorButtonComponent.js","app/CalculatorComponent.js","app/duck/types.js","app/duck/reducers.js","app/duck/actions.js","app/duck/operations.js","app/duck/index.js","app/CalculatorContainer.js","app/App.js","reducers.js","store.js","index.js"],"names":["CalculatorButtonComponent","props","className","id","onClick","handleClick","text","CalculatorComponent","formulaDisplay","display","evaluate","handleZero","handleOperand","handleOperator","handleDecimal","clear","INITIAL_STATE","outputQueue","hasDecimal","evaluated","prevAns","homeReducer","state","action","type","types","Object","assign","formula","operator","output","value","precedence","evaluateOperator","op","a","b","dispatch","getState","home","isEvaluated","newQueue","hasOwnProperty","length","concat","newFormula","slice","Creators","newDisplay","expression","opStack","valueStack","i","element","pop","push","Number","ans","toString","CalculatorContainer","connect","homeOperations","App","icon","faMinus","faPlus","faDivide","faEquals","faWaveSquare","faSquareRootAlt","faGreaterThan","faLessThanEqual","faNotEqual","faSubscript","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c61f6d02.chunk.js","sourcesContent":["import React from 'react';\r\nimport './calc-button.scss';\r\n\r\nconst CalculatorButtonComponent = (props) => {\r\n    return (\r\n        <div className=\"calc-button\" id={props.id} onClick={() => {props.handleClick(props.text)}}>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorButtonComponent;","import React from 'react';\r\nimport CalculatorButton from './CalculatorButtonComponent';\r\nimport './calculator.scss';\r\n\r\nconst CalculatorComponent = (props) => {\r\n    return (\r\n        <div id=\"calc-container\">\r\n            <div id=\"display-container\">\r\n                <p id=\"formula\">{props.formulaDisplay}</p>\r\n                <p id=\"display\">{props.display}</p>\r\n            </div>\r\n            <CalculatorButton id=\"equals\" text=\"=\" handleClick={props.evaluate} />\r\n            <CalculatorButton id=\"zero\" text=\"0\" handleClick={props.handleZero}/>\r\n            <CalculatorButton id=\"one\" text=\"1\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"two\" text=\"2\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"three\" text=\"3\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"four\" text=\"4\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"five\" text=\"5\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"six\" text=\"6\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"seven\" text=\"7\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"eight\" text=\"8\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"nine\" text=\"9\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"add\" text=\"+\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"subtract\" text=\"-\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"multiply\" text=\"*\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"divide\" text=\"/\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"decimal\" text=\".\" handleClick={props.handleDecimal}/>\r\n            <CalculatorButton id=\"clear\" text=\"AC\" handleClick={props.clear}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatorComponent;","const OPERATOR = 'OPERATOR';\r\nconst OPERAND = 'OPERAND';\r\nconst ZERO = 'ZERO';\r\nconst DECIMAL = 'DECIMAL';\r\nconst EVALUATE = 'EVALUATE';\r\nconst CLEAR = 'CLEAR';\r\n\r\nexport default {\r\n    OPERATOR,\r\n    OPERAND,\r\n    ZERO,\r\n    DECIMAL,\r\n    EVALUATE,\r\n    CLEAR\r\n};","import types from './types.js';\r\n\r\nconst INITIAL_STATE = {\r\n    display: '0',\r\n    formulaDisplay: '',\r\n    outputQueue: [],\r\n    hasDecimal: false,\r\n    evaluated: false,\r\n    prevAns: ''\r\n};\r\n\r\nconst homeReducer = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ZERO:\r\n            return Object.assign({}, state, {\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                outputQueue: action.outputQueue\r\n            })\r\n        case types.OPERATOR:\r\n            return Object.assign({}, state, {\r\n                    display: action.operator,\r\n                    formulaDisplay: action.formula,\r\n                    outputQueue: action.outputQueue,\r\n                    evaluated: false,\r\n                    hasDecimal: false\r\n                });\r\n        case types.OPERAND:\r\n            return Object.assign({}, state, {\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                outputQueue: action.outputQueue\r\n            });\r\n        case types.EVALUATE:\r\n            return Object.assign({}, state, {\r\n                display: action.output,\r\n                formulaDisplay: action.formula,\r\n                evaluated: true,\r\n                hasDecimal: false,\r\n                outputQueue: [action.output],\r\n                prevAns: action.output\r\n            });\r\n        case types.DECIMAL:\r\n            return Object.assign({}, state, {\r\n                hasDecimal: true,\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                outputQueue: action.outputQueue\r\n            });\r\n        case types.CLEAR:\r\n            return INITIAL_STATE;\r\n        default:       \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default homeReducer;","import types from './types.js';\r\n\r\nconst handleOperator = (value, formula, outputQueue) => {\r\n    return {\r\n        type: types.OPERATOR,\r\n        operator: value,\r\n        formula: formula,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst handleOperand = (display, formula, outputQueue) => {\r\n    return {\r\n        type: types.OPERAND,\r\n        display: display,\r\n        formula: formula,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst handleZero = (display, formula, outputQueue) => {\r\n    return {\r\n        type: types.ZERO,\r\n        formula: formula,\r\n        display: display,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst evaluate = (output, formula) => {\r\n    return {\r\n        type: types.EVALUATE,\r\n        output: output,\r\n        formula: formula\r\n    };\r\n}\r\n\r\nconst handleDecimal = (formula, display, outputQueue) => {\r\n    return {\r\n        type: types.DECIMAL,\r\n        formula: formula,\r\n        display: display,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: types.CLEAR\r\n    };\r\n}\r\n\r\nexport default { \r\n    handleOperator,\r\n    handleOperand,\r\n    handleZero,\r\n    handleDecimal,\r\n    evaluate,\r\n    clear\r\n};","import Creators from './actions.js';\r\n\r\nconst precedence = {\r\n    \"/\": 2,\r\n    \"*\": 2,\r\n    \"+\": 1,\r\n    \"-\": 1\r\n};\r\n\r\nconst clear = Creators.clear;\r\n\r\nconst evaluateOperator = (op, a, b) => {\r\n    switch (op) {\r\n        case \"-\":\r\n            return b - a;\r\n        case \"+\":\r\n            return b + a;\r\n        case \"*\":\r\n            return b * a;\r\n        case \"/\":\r\n            return b / a;\r\n        default: return;\r\n    }\r\n}\r\n\r\nconst handleDecimal = () => {\r\n    return (dispatch, getState) => {\r\n        const hasDecimal = getState().home.hasDecimal;\r\n        const outputQueue = getState().home.outputQueue;\r\n\r\n        if (!hasDecimal) {\r\n            const isEvaluated = getState().home.evaluated;\r\n            const display = getState().home.display;\r\n            const formula = getState().home.formulaDisplay;\r\n\r\n            const newFormula = (isEvaluated || formula.length === 0) ? \"0.\" : \r\n            // if decimal is preceded by operator \r\n                precedence.hasOwnProperty(formula[formula.length - 1]) ?\r\n                formula.concat(\"0.\") :\r\n                formula.concat(\".\");\r\n\r\n            const newDisplay = isEvaluated ? \"0.\" : \r\n            // if prev input was operator remove operator from display and replace else join with number\r\n                precedence.hasOwnProperty(display) ?\r\n                display.slice(0, -1).concat(\"0.\") :\r\n                display.concat(\".\");\r\n\r\n            // if prev input was operator add it to the queue\r\n            const newQueue = precedence.hasOwnProperty(display) ? \r\n                [...outputQueue, display] :\r\n                outputQueue;\r\n            \r\n            dispatch(Creators.handleDecimal(newFormula, newDisplay, newQueue));\r\n        }\r\n    };\r\n}\r\n\r\nconst evaluate = () => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        if (isEvaluated) {\r\n            return;\r\n        }\r\n\r\n        // dispatch this to add last number to queue\r\n        dispatch(handleOperator(\"=\"));\r\n\r\n        const formula = getState().home.formulaDisplay;\r\n        const outputQueue = getState().home.outputQueue;\r\n\r\n        // if prev input was operator ignore it\r\n        let expression = precedence.hasOwnProperty(formula[formula.length - 1]) ? \r\n            formula.slice(0, -1) :\r\n            formula;\r\n\r\n        // infix evaluation\r\n        const opStack = [];\r\n        const valueStack = [];\r\n        for (var i = 0; i < outputQueue.length; i++) {\r\n            let element = outputQueue[i]\r\n            if (precedence.hasOwnProperty(element)) {\r\n                if (opStack.length > 0 && precedence[opStack[opStack.length - 1]] >= precedence[element]) {\r\n                    let a = valueStack.pop();\r\n                    let b = valueStack.pop();\r\n                    let op = opStack.pop();\r\n\r\n                    valueStack.push(evaluateOperator(op, a, b));\r\n                }\r\n                opStack.push(element);\r\n            } else {\r\n                valueStack.push(Number(element));\r\n            }\r\n        }\r\n\r\n        while (opStack.length > 0) {\r\n            let op = opStack.pop();\r\n            let a = valueStack.pop();\r\n            let b = valueStack.pop();\r\n            valueStack.push(evaluateOperator(op, a, b));\r\n        }\r\n\r\n        // return expression if no precedence\r\n        const ans = valueStack.length === 0 ? expression : valueStack.pop().toString();\r\n\r\n        dispatch(Creators.evaluate(ans, expression.concat(ans)));\r\n    };\r\n}\r\n\r\nconst handleZero = () => {\r\n    return (dispatch, getState) => {\r\n        const display = getState().home.display;\r\n        const formula = getState().home.formulaDisplay;\r\n        const outputQueue = getState().home.outputQueue;\r\n        const isEvaluated = getState().home.evaluated;\r\n        \r\n        if (display !== \"0\" || formula !== \"0\") {\r\n            const newFormula = (isEvaluated || formula.length === 0) ? \"0\" : formula.concat(\"0\");\r\n            // if display already starts with 0 leave it else add 0 to end \r\n            const newDisplay = (isEvaluated || display === \"0\" || precedence.hasOwnProperty(display)) ?\r\n             \"0\" : \r\n             display.concat(\"0\");\r\n\r\n            // if prev input was operator, add to queue\r\n            const newQueue = precedence.hasOwnProperty(display) ? \r\n            [...outputQueue, display] :\r\n            outputQueue;\r\n\r\n            dispatch(Creators.handleZero(newDisplay, newFormula, newQueue));\r\n        }\r\n    };\r\n}\r\n\r\nconst handleOperator = (value) => {\r\n    return (dispatch, getState) => {\r\n        const outputQueue = getState().home.outputQueue;\r\n        const formula = getState().home.formulaDisplay;\r\n        const display = getState().home.display;\r\n        const isEvaluated = getState().home.evaluated;\r\n\r\n        // if prev input was number\r\n        const newQueue = !precedence.hasOwnProperty(display) ?\r\n            // if its not the first number and there are two operands before it\r\n            formula.length > 1 && formula[formula.length - display.length - 1] === \"-\" && \r\n            precedence.hasOwnProperty(formula[formula.length - display.length - 2]) ?\r\n            // add negative number to queue\r\n            [...outputQueue, \"-\".concat(display)] :\r\n            [...outputQueue, display] :\r\n            outputQueue;\r\n\r\n        let newFormula = '';\r\n\r\n        if (isEvaluated) {\r\n            // if formula has been evaluated continue it with the prev answer and new operator\r\n            newFormula = getState().home.prevAns + value;\r\n        } else {\r\n            // allow negative numbers by adding negative sign after other precedence\r\n            // double negation disallowed\r\n            if (value === \"-\" && formula[formula.length - 1] !== \"-\") {\r\n                newFormula = formula.concat(value);\r\n            } else {\r\n                newFormula = precedence.hasOwnProperty(formula[formula.length - 1]) ?\r\n                precedence.hasOwnProperty(formula[formula.length - 2]) ?\r\n                // if there were two precedence previously remove both and replace with current\r\n                formula.slice(0, -2).concat(value) :\r\n                // else remove the one operator and replace with current\r\n                formula.slice(0, -1).concat(value) :\r\n                // if no precedence previously, add current\r\n                formula.concat(value);\r\n            }\r\n        }\r\n        \r\n        dispatch(Creators.handleOperator(value, newFormula, newQueue));\r\n    };\r\n}\r\n\r\nconst handleOperand = (value) => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        const formula = getState().home.formulaDisplay;\r\n        const display = getState().home.display;\r\n        const outputQueue = getState().home.outputQueue;\r\n\r\n        if (display.length > 15 || formula.length > 100) {\r\n            return;\r\n        }\r\n\r\n        // if previous evaluated start new display\r\n        const newDisplay = isEvaluated ? value : \r\n            // if prev input was 0 or an operator, replace with current number\r\n            (display === \"0\" || precedence.hasOwnProperty(display)) ? \r\n            value : \r\n            // else concat number to display\r\n            display.concat(value);\r\n\r\n        // previous evaluated or formula is 0 replace start new formula\r\n        const newFormula = isEvaluated || formula === \"0\" ? value : \r\n        // if initially performing operation with 0, replace with new value\r\n        precedence.hasOwnProperty(formula[formula.length - 2]) && formula[formula.length - 1] === \"0\" ?\r\n        formula.slice(0, -1).concat(value) :\r\n        formula.concat(value);\r\n\r\n        const newQueue = precedence.hasOwnProperty(formula[formula.length - 1]) ?\r\n            precedence.hasOwnProperty(formula[formula.length - 2]) ?\r\n            // ignore negative sign if there is one and add the prev operator to queue\r\n            [...outputQueue, formula[formula.length - 2]] :\r\n            [...outputQueue, formula[formula.length - 1]] :\r\n            outputQueue;\r\n\r\n        dispatch(Creators.handleOperand(newDisplay, newFormula, newQueue));\r\n    };\r\n}\r\n\r\nexport default {\r\n    handleZero,\r\n    handleOperator,\r\n    handleOperand,\r\n    handleDecimal,\r\n    evaluate,\r\n    clear\r\n};","import homeReducer from './reducers';\r\nexport { default as homeOperations} from './operations';\r\nexport { default as homeTypes } from './types';\r\nexport default homeReducer; ","import { connect } from 'react-redux';\r\nimport CalculatorComponent from './CalculatorComponent';\r\nimport { homeOperations } from './duck';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        display:  state.home.display,\r\n        formulaDisplay: state.home.formulaDisplay\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleOperand: (value) => {\r\n            dispatch(homeOperations.handleOperand(value));\r\n        },\r\n        handleOperator: (value) => {\r\n            dispatch(homeOperations.handleOperator(value));\r\n        },\r\n        evaluate: () => {\r\n            dispatch(homeOperations.evaluate());\r\n        },\r\n        clear: () => {\r\n            dispatch(homeOperations.clear());\r\n        },\r\n        handleZero: () => {\r\n            dispatch(homeOperations.handleZero());\r\n        },\r\n        handleDecimal: () => {\r\n            dispatch(homeOperations.handleDecimal());\r\n        }\r\n    };\r\n}\r\n\r\nconst CalculatorContainer = connect(mapStateToProps, mapDispatchToProps)(CalculatorComponent);\r\nexport default CalculatorContainer;","import React from 'react';\r\nimport Calculator from './CalculatorContainer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDivide, faEquals, faMinus, faPlus, faWaveSquare,\r\n   faSquareRootAlt, faLessThanEqual, faGreaterThan, \r\n   faNotEqual, faSubscript } from '@fortawesome/free-solid-svg-icons';\r\nimport './app.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"icons\">\r\n        <FontAwesomeIcon id=\"minus-icon\" icon={faMinus} />\r\n        <FontAwesomeIcon id=\"plus-icon\" icon={faPlus} />\r\n        <FontAwesomeIcon id=\"divide-icon\" icon={faDivide} />\r\n        <FontAwesomeIcon id=\"equals-icon\" icon={faEquals} />\r\n        <FontAwesomeIcon id=\"wave-square-icon\" icon={faWaveSquare} />\r\n        <FontAwesomeIcon id=\"sqrt-icon\" icon={faSquareRootAlt} />\r\n        <FontAwesomeIcon id=\"gt-icon\" icon={faGreaterThan} />\r\n        <FontAwesomeIcon id=\"lt-icon\" icon={faLessThanEqual} />\r\n        <FontAwesomeIcon id=\"not-equals-icon\" icon={faNotEqual} />\r\n        <FontAwesomeIcon id=\"subscript-icon\" icon={faSubscript} />\r\n      </div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport homeReducer from './app/duck';\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}