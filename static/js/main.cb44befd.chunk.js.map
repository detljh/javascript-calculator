{"version":3,"sources":["app/CalculatorButtonComponent.js","app/CalculatorComponent.js","app/duck/types.js","app/duck/reducers.js","app/duck/actions.js","app/duck/operations.js","app/duck/index.js","app/CalculatorContainer.js","app/App.js","reducers.js","store.js","index.js"],"names":["CalculatorButtonComponent","props","className","id","onClick","handleClick","text","CalculatorComponent","formulaDisplay","display","evaluate","handleOperand","handleOperator","clear","INITIAL_STATE","outputQueue","isNegativeNumber","evaluated","prevAns","homeReducer","state","action","type","types","Object","assign","operator","formula","output","value","precedence","evaluateOperator","op","a","b","dispatch","getState","home","isEvaluated","newQueue","newFormula","hasOwnProperty","concat","length","slice","Creators","newDisplay","expression","RegExp","test","checkWellFormedNumber","opStack","valueStack","i","element","pop","push","Number","ans","toString","CalculatorContainer","connect","homeOperations","handleZero","handleDecimal","App","icon","faMinus","faPlus","faDivide","faEquals","faWaveSquare","faSquareRootAlt","faGreaterThan","faLessThanEqual","faNotEqual","faSubscript","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb44befd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './calc-button.scss';\r\n\r\nconst CalculatorButtonComponent = (props) => {\r\n    return (\r\n        <div className=\"calc-button\" id={props.id} onClick={() => {props.handleClick(props.text)}}>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorButtonComponent;","import React from 'react';\r\nimport CalculatorButton from './CalculatorButtonComponent';\r\nimport './calculator.scss';\r\n\r\nconst CalculatorComponent = (props) => {\r\n    return (\r\n        <div id=\"calc-container\">\r\n            <div id=\"display-container\">\r\n                <p id=\"formula\">{props.formulaDisplay}</p>\r\n                <p id=\"display\">{props.display}</p>\r\n            </div>\r\n            <CalculatorButton id=\"equals\" text=\"=\" handleClick={props.evaluate} />\r\n            <CalculatorButton id=\"zero\" text=\"0\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"one\" text=\"1\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"two\" text=\"2\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"three\" text=\"3\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"four\" text=\"4\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"five\" text=\"5\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"six\" text=\"6\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"seven\" text=\"7\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"eight\" text=\"8\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"nine\" text=\"9\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"add\" text=\"+\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"subtract\" text=\"-\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"multiply\" text=\"*\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"divide\" text=\"/\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"decimal\" text=\".\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"clear\" text=\"AC\" handleClick={props.clear}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatorComponent;","const OPERATOR = 'OPERATOR';\r\nconst OPERAND = 'OPERAND';\r\nconst ZERO = 'ZERO';\r\nconst DECIMAL = 'DECIMAL';\r\nconst EVALUATE = 'EVALUATE';\r\nconst CLEAR = 'CLEAR';\r\n\r\nexport default {\r\n    OPERATOR,\r\n    OPERAND,\r\n    ZERO,\r\n    DECIMAL,\r\n    EVALUATE,\r\n    CLEAR\r\n};","import types from './types.js';\r\n\r\nconst INITIAL_STATE = {\r\n    display: '0',\r\n    formulaDisplay: '',\r\n    outputQueue: [],\r\n    isNegativeNumber: false,\r\n    evaluated: false,\r\n    prevAns: ''\r\n};\r\n\r\nconst homeReducer = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.OPERATOR:\r\n            return Object.assign({}, state, {\r\n                    display: action.operator,\r\n                    formulaDisplay: action.formula,\r\n                    outputQueue: action.outputQueue,\r\n                    evaluated: false,\r\n                    isNegativeNumber: false\r\n                });\r\n        case types.OPERAND:\r\n            return Object.assign({}, state, {\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                outputQueue: action.outputQueue,\r\n                isNegativeNumber: action.isNegativeNumber\r\n            });\r\n        case types.EVALUATE:\r\n            return Object.assign({}, state, {\r\n                display: action.output,\r\n                formulaDisplay: action.formula,\r\n                evaluated: true,\r\n                outputQueue: [action.output],\r\n                prevAns: action.output,\r\n                isNegativeNumber: false\r\n            });\r\n        case types.CLEAR:\r\n            return INITIAL_STATE;\r\n        default:       \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default homeReducer;","import types from './types.js';\r\n\r\nconst handleOperator = (value, formula, outputQueue) => {\r\n    return {\r\n        type: types.OPERATOR,\r\n        operator: value,\r\n        formula: formula,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst handleOperand = (display, formula, outputQueue, isNegativeNumber) => {\r\n    return {\r\n        type: types.OPERAND,\r\n        display: display,\r\n        formula: formula,\r\n        outputQueue: outputQueue,\r\n        isNegativeNumber: isNegativeNumber\r\n    };\r\n}\r\n\r\nconst evaluate = (output, formula) => {\r\n    return {\r\n        type: types.EVALUATE,\r\n        output: output,\r\n        formula: formula\r\n    };\r\n}\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: types.CLEAR\r\n    };\r\n}\r\n\r\nexport default { \r\n    handleOperator,\r\n    handleOperand,\r\n    evaluate,\r\n    clear\r\n};","import Creators from './actions.js';\r\n\r\nconst precedence = {\r\n    \"/\": 2,\r\n    \"*\": 2,\r\n    \"+\": 1,\r\n    \"-\": 1\r\n};\r\n\r\nconst clear = Creators.clear;\r\n\r\nconst evaluateOperator = (op, a, b) => {\r\n    switch (op) {\r\n        case \"-\":\r\n            return b - a;\r\n        case \"+\":\r\n            return b + a;\r\n        case \"*\":\r\n            return b * a;\r\n        case \"/\":\r\n            return b / a;\r\n        default: return;\r\n    }\r\n}\r\n\r\nconst checkWellFormedNumber = (expression) => {\r\n    // cannot start with more than one 0, decimal must be preceded with number\r\n    const form = new RegExp(/^(([1-9]+0*\\.?|0\\.)[0-9]*|0)$/);\r\n    return form.test(expression);\r\n}\r\n\r\nconst evaluate = () => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        if (isEvaluated) {\r\n            return;\r\n        }\r\n\r\n        // dispatch this to add last number to queue\r\n        dispatch(handleOperator(\"=\"));\r\n\r\n        const formula = getState().home.formulaDisplay;\r\n        const outputQueue = getState().home.outputQueue;\r\n\r\n        // if prev input was operator ignore it\r\n        let expression = precedence.hasOwnProperty(formula[formula.length - 1]) ? \r\n            formula.slice(0, -1) :\r\n            formula;\r\n\r\n        // infix evaluation\r\n        const opStack = [];\r\n        const valueStack = [];\r\n        for (var i = 0; i < outputQueue.length; i++) {\r\n            let element = outputQueue[i]\r\n            if (precedence.hasOwnProperty(element)) {\r\n                if (opStack.length > 0 && precedence[opStack[opStack.length - 1]] >= precedence[element]) {\r\n                    let a = valueStack.pop();\r\n                    let b = valueStack.pop();\r\n                    let op = opStack.pop();\r\n\r\n                    valueStack.push(evaluateOperator(op, a, b));\r\n                }\r\n                opStack.push(element);\r\n            } else {\r\n                valueStack.push(Number(element));\r\n            }\r\n        }\r\n\r\n        while (opStack.length > 0) {\r\n            let op = opStack.pop();\r\n            let a = valueStack.pop();\r\n            let b = valueStack.pop();\r\n            valueStack.push(evaluateOperator(op, a, b));\r\n        }\r\n\r\n        // return expression if no precedence\r\n        const ans = valueStack.length === 0 ? expression : valueStack.pop().toString();\r\n\r\n        dispatch(Creators.evaluate(ans, expression.concat(ans)));\r\n    };\r\n}\r\n\r\nconst handleOperator = (value) => {\r\n    return (dispatch, getState) => {\r\n        const outputQueue = getState().home.outputQueue;\r\n        const formula = getState().home.formulaDisplay;\r\n        const display = getState().home.display;\r\n        const isEvaluated = getState().home.evaluated;\r\n        const isNegativeNumber = getState().home.isNegativeNumber;\r\n        let newQueue = outputQueue;\r\n        let newFormula = '';\r\n\r\n        if (isEvaluated) {\r\n            // if formula has been evaluated continue it with the prev answer and new operator\r\n            newFormula = getState().home.prevAns + value;\r\n        } else {\r\n            // if prev input was number\r\n            newQueue = !precedence.hasOwnProperty(display) ?\r\n            isNegativeNumber ? [...outputQueue, \"-\".concat(display)] :\r\n            [...outputQueue, display] :\r\n            outputQueue;\r\n\r\n            // allow negative numbers by adding negative sign after other precedence\r\n            // double negation disallowed\r\n            if (value === \"-\" && formula[formula.length - 1] !== \"-\") {\r\n                newFormula = formula.concat(value);\r\n            } else {\r\n                newFormula = precedence.hasOwnProperty(formula[formula.length - 1]) ?\r\n                precedence.hasOwnProperty(formula[formula.length - 2]) ?\r\n                // if there were two operators previously remove both and replace with current\r\n                formula.slice(0, -2).concat(value) :\r\n                // else remove the one operator and replace with current\r\n                formula.slice(0, -1).concat(value) :\r\n                // if no operator previously, add current\r\n                formula.concat(value);\r\n            }\r\n        }\r\n\r\n        dispatch(Creators.handleOperator(value, newFormula, newQueue));\r\n    };\r\n}\r\n\r\nconst handleOperand = (value) => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        const formula = isEvaluated ? \"\" : getState().home.formulaDisplay;\r\n        const display = isEvaluated ? \"\" : getState().home.display;\r\n\r\n        if (display.length > 15 || formula.length > 100) {\r\n            return;\r\n        }\r\n\r\n        const outputQueue = getState().home.outputQueue;\r\n        let newQueue = outputQueue;\r\n        let isNegativeNumber = false;\r\n\r\n        if (precedence.hasOwnProperty(formula[formula.length - 1])) {\r\n            if (precedence.hasOwnProperty(formula[formula.length - 2])) {\r\n            // ignore negative sign if there is one and add the prev operator to queue\r\n               newQueue = [...outputQueue, formula[formula.length - 2]];\r\n               isNegativeNumber = true;\r\n            } else {\r\n               newQueue = [...outputQueue, formula[formula.length - 1]];\r\n            }\r\n        }\r\n\r\n        let newDisplay = precedence.hasOwnProperty(display) ? \"\" : display;\r\n        let newFormula = formula;\r\n        // to replace the zero as numbers cannot start with more than one zero\r\n        if (display === \"0\") {\r\n            newDisplay = \"\"\r\n            newFormula = \"\";\r\n        }\r\n\r\n        // if prev value was operator or display is blank\r\n        if (value === \".\" && (precedence.hasOwnProperty(display) || newDisplay === \"\")) {\r\n            value = \"0.\";\r\n        }\r\n\r\n        const expression = newDisplay.concat(value);\r\n        if (checkWellFormedNumber(expression)) {\r\n            newFormula = newFormula.concat(value);\r\n            dispatch(Creators.handleOperand(expression, newFormula, newQueue, isNegativeNumber));\r\n        }\r\n    };\r\n}\r\n\r\nexport default {\r\n    handleOperator,\r\n    handleOperand,\r\n    evaluate,\r\n    clear\r\n};","import homeReducer from './reducers';\r\nexport { default as homeOperations} from './operations';\r\nexport { default as homeTypes } from './types';\r\nexport default homeReducer; ","import { connect } from 'react-redux';\r\nimport CalculatorComponent from './CalculatorComponent';\r\nimport { homeOperations } from './duck';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        display:  state.home.display,\r\n        formulaDisplay: state.home.formulaDisplay\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleOperand: (value) => {\r\n            dispatch(homeOperations.handleOperand(value));\r\n        },\r\n        handleOperator: (value) => {\r\n            dispatch(homeOperations.handleOperator(value));\r\n        },\r\n        evaluate: () => {\r\n            dispatch(homeOperations.evaluate());\r\n        },\r\n        clear: () => {\r\n            dispatch(homeOperations.clear());\r\n        },\r\n        handleZero: () => {\r\n            dispatch(homeOperations.handleZero());\r\n        },\r\n        handleDecimal: () => {\r\n            dispatch(homeOperations.handleDecimal());\r\n        }\r\n    };\r\n}\r\n\r\nconst CalculatorContainer = connect(mapStateToProps, mapDispatchToProps)(CalculatorComponent);\r\nexport default CalculatorContainer;","import React from 'react';\r\nimport Calculator from './CalculatorContainer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDivide, faEquals, faMinus, faPlus, faWaveSquare,\r\n   faSquareRootAlt, faLessThanEqual, faGreaterThan, \r\n   faNotEqual, faSubscript } from '@fortawesome/free-solid-svg-icons';\r\nimport './app.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"icons\">\r\n        <FontAwesomeIcon id=\"minus-icon\" icon={faMinus} />\r\n        <FontAwesomeIcon id=\"plus-icon\" icon={faPlus} />\r\n        <FontAwesomeIcon id=\"divide-icon\" icon={faDivide} />\r\n        <FontAwesomeIcon id=\"equals-icon\" icon={faEquals} />\r\n        <FontAwesomeIcon id=\"wave-square-icon\" icon={faWaveSquare} />\r\n        <FontAwesomeIcon id=\"sqrt-icon\" icon={faSquareRootAlt} />\r\n        <FontAwesomeIcon id=\"gt-icon\" icon={faGreaterThan} />\r\n        <FontAwesomeIcon id=\"lt-icon\" icon={faLessThanEqual} />\r\n        <FontAwesomeIcon id=\"not-equals-icon\" icon={faNotEqual} />\r\n        <FontAwesomeIcon id=\"subscript-icon\" icon={faSubscript} />\r\n      </div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport homeReducer from './app/duck';\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}