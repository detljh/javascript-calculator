{"version":3,"sources":["app/CalculatorButtonComponent.js","app/CalculatorComponent.js","app/duck/types.js","app/duck/reducers.js","app/duck/actions.js","app/duck/operations.js","app/duck/index.js","app/CalculatorContainer.js","app/App.js","reducers.js","store.js","index.js"],"names":["CalculatorButtonComponent","props","className","id","onClick","handleClick","text","CalculatorComponent","formulaDisplay","display","evaluate","handleZero","handleOperand","handleOperator","handleDecimal","clear","INITIAL_STATE","outputQueue","opStack","hasDecimal","evaluated","prevAns","homeReducer","state","action","type","types","Object","assign","formula","operator","output","value","OPERATORS","dispatch","getState","home","isEvaluated","newQueue","includes","length","concat","newFormula","slice","Creators","newDisplay","newStack","expression","totalOps","reverse","i","element","a","pop","b","push","Number","ans","toString","CalculatorContainer","connect","homeOperations","App","icon","faMinus","faPlus","faDivide","faEquals","faWaveSquare","faSquareRootAlt","faGreaterThan","faLessThanEqual","faNotEqual","faSubscript","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.784c41f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './calc-button.scss';\r\n\r\nconst CalculatorButtonComponent = (props) => {\r\n    return (\r\n        <div className=\"calc-button\" id={props.id} onClick={() => {props.handleClick(props.text)}}>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorButtonComponent;","import React from 'react';\r\nimport CalculatorButton from './CalculatorButtonComponent';\r\nimport './calculator.scss';\r\n\r\nconst CalculatorComponent = (props) => {\r\n    return (\r\n        <div id=\"calc-container\">\r\n            <div id=\"display\">\r\n                <p id=\"formula\">{props.formulaDisplay}</p>\r\n                <p id=\"input-display\">{props.display}</p>\r\n            </div>\r\n            <CalculatorButton id=\"equals\" text=\"=\" handleClick={props.evaluate} />\r\n            <CalculatorButton id=\"zero\" text=\"0\" handleClick={props.handleZero}/>\r\n            <CalculatorButton id=\"one\" text=\"1\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"two\" text=\"2\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"three\" text=\"3\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"four\" text=\"4\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"five\" text=\"5\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"six\" text=\"6\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"seven\" text=\"7\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"eight\" text=\"8\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"nine\" text=\"9\" handleClick={props.handleOperand}/>\r\n            <CalculatorButton id=\"add\" text=\"+\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"subtract\" text=\"-\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"multiply\" text=\"*\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"divide\" text=\"/\" handleClick={props.handleOperator}/>\r\n            <CalculatorButton id=\"decimal\" text=\".\" handleClick={props.handleDecimal}/>\r\n            <CalculatorButton id=\"clear\" text=\"AC\" handleClick={props.clear}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatorComponent;","const OPERATOR = 'OPERATOR';\r\nconst OPERAND = 'OPERAND';\r\nconst ZERO = 'ZERO';\r\nconst DECIMAL = 'DECIMAL';\r\nconst EVALUATE = 'EVALUATE';\r\nconst CLEAR = 'CLEAR';\r\n\r\nexport default {\r\n    OPERATOR,\r\n    OPERAND,\r\n    ZERO,\r\n    DECIMAL,\r\n    EVALUATE,\r\n    CLEAR\r\n};","import types from './types.js';\r\n\r\nconst INITIAL_STATE = {\r\n    display: '0',\r\n    formulaDisplay: '',\r\n    outputQueue: [],\r\n    opStack: [],\r\n    hasDecimal: false,\r\n    evaluated: false,\r\n    prevAns: ''\r\n};\r\n\r\nconst homeReducer = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ZERO:\r\n            return Object.assign({}, state, {\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                opStack: action.opStack\r\n            })\r\n        case types.OPERATOR:\r\n            return Object.assign({}, state, {\r\n                    display: action.operator,\r\n                    formulaDisplay: action.formula,\r\n                    outputQueue: action.outputQueue,\r\n                    evaluated: false,\r\n                    hasDecimal: false\r\n                });\r\n        case types.OPERAND:\r\n            return Object.assign({}, state, {\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                opStack: action.opStack\r\n            });\r\n        case types.EVALUATE:\r\n            return Object.assign({}, state, {\r\n                display: action.output,\r\n                formulaDisplay: action.formula,\r\n                evaluated: true,\r\n                hasDecimal: false,\r\n                outputQueue: [action.output],\r\n                opStack: [],\r\n                prevAns: action.output\r\n            });\r\n        case types.DECIMAL:\r\n            return Object.assign({}, state, {\r\n                hasDecimal: true,\r\n                display: action.display,\r\n                formulaDisplay: action.formula,\r\n                evaluated: false,\r\n                opStack: action.opStack\r\n            });\r\n        case types.CLEAR:\r\n            return INITIAL_STATE;\r\n        default:       \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default homeReducer;","import types from './types.js';\r\n\r\nconst handleOperator = (value, formula, outputQueue) => {\r\n    return {\r\n        type: types.OPERATOR,\r\n        operator: value,\r\n        formula: formula,\r\n        outputQueue: outputQueue\r\n    };\r\n}\r\n\r\nconst handleOperand = (display, formula, opStack) => {\r\n    return {\r\n        type: types.OPERAND,\r\n        display: display,\r\n        formula: formula,\r\n        opStack: opStack\r\n    };\r\n}\r\n\r\nconst handleZero = (display, formula, opStack) => {\r\n    return {\r\n        type: types.ZERO,\r\n        formula: formula,\r\n        display: display,\r\n        opStack: opStack\r\n    };\r\n}\r\n\r\nconst evaluate = (output, formula) => {\r\n    return {\r\n        type: types.EVALUATE,\r\n        output: output,\r\n        formula: formula\r\n    };\r\n}\r\n\r\nconst handleDecimal = (formula, display, opStack) => {\r\n    return {\r\n        type: types.DECIMAL,\r\n        formula: formula,\r\n        display: display,\r\n        opStack: opStack\r\n    };\r\n}\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: types.CLEAR\r\n    };\r\n}\r\n\r\nexport default { \r\n    handleOperator,\r\n    handleOperand,\r\n    handleZero,\r\n    handleDecimal,\r\n    evaluate,\r\n    clear\r\n};","import Creators from './actions.js';\r\n\r\nconst OPERATORS = ['+', '-', '*', '/'];\r\nconst clear = Creators.clear;\r\n\r\nconst handleDecimal = () => {\r\n    return (dispatch, getState) => {\r\n        const hasDecimal = getState().home.hasDecimal;\r\n        const opStack = getState().home.opStack;\r\n\r\n        if (!hasDecimal) {\r\n            const isEvaluated = getState().home.evaluated;\r\n            const display = getState().home.display;\r\n            const formula = getState().home.formulaDisplay;\r\n\r\n            const newFormula = (isEvaluated || formula.length === 0) ? \"0.\" : \r\n            // if decimal is preceded by operator \r\n                OPERATORS.includes(formula[formula.length - 1]) ?\r\n                formula.concat(\"0.\") :\r\n                formula.concat(\".\");\r\n\r\n            const newDisplay = isEvaluated ? \"0.\" : \r\n            // if prev input was operator remove operator from display and replace else join with number\r\n                OPERATORS.includes(display) ?\r\n                display.slice(0, -1).concat(\"0.\") :\r\n                display.concat(\".\");\r\n\r\n            // if prev input was operator add it to the stack\r\n            const newStack = OPERATORS.includes(display) ? \r\n                [...opStack, display] :\r\n                opStack;\r\n            \r\n            dispatch(Creators.handleDecimal(newFormula, newDisplay, newStack));\r\n        }\r\n    };\r\n}\r\n\r\nconst evaluate = () => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        if (isEvaluated) {\r\n            return;\r\n        }\r\n\r\n        // dispatch this to add last number to queue\r\n        dispatch(handleOperator(\"=\"));\r\n\r\n        const formula = getState().home.formulaDisplay;\r\n        const outputQueue = getState().home.outputQueue;\r\n        const opStack = getState().home.opStack;\r\n\r\n        // if prev input was operator ignore it\r\n        let expression = OPERATORS.includes(formula[formula.length - 1]) ? \r\n            formula.slice(0, -1) :\r\n            formula;\r\n\r\n        // using shunting yard algorithm to construct post fix expression\r\n        const totalOps = outputQueue.concat(opStack.reverse());\r\n        const output = [];\r\n        \r\n        for (var i = 0; i < totalOps.length; i++) {\r\n            let element = totalOps[i]\r\n            if (OPERATORS.includes(element)) {\r\n                const a = output.pop();\r\n                const b = output.pop();\r\n\r\n                switch (element) {\r\n                    case \"-\":\r\n                        output.push(b - a);\r\n                        break;\r\n                    case \"+\":\r\n                        output.push(b + a);\r\n                        break;\r\n                    case \"*\":\r\n                        output.push(b * a);\r\n                        break;\r\n                    case \"/\":\r\n                        output.push(b / a);\r\n                        break;\r\n                    default: break;\r\n                }\r\n            } else {\r\n                output.push(Number(element));\r\n            }\r\n        }\r\n\r\n        // return expression if no operators\r\n        const ans = output.length === 0 ? expression : output.pop().toString();\r\n\r\n        dispatch(Creators.evaluate(ans, expression.concat(ans)));\r\n    };\r\n}\r\n\r\nconst handleZero = () => {\r\n    return (dispatch, getState) => {\r\n        const display = getState().home.display;\r\n        const formula = getState().home.formulaDisplay;\r\n        const opStack = getState().home.opStack;\r\n        const isEvaluated = getState().home.evaluated;\r\n        \r\n        if (display !== \"0\" || formula !== \"0\") {\r\n            const newFormula = (isEvaluated || formula.length === 0) ? \"0\" : formula.concat(\"0\");\r\n            // if display already starts with 0 leave it else add 0 to end \r\n            const newDisplay = (isEvaluated || display === \"0\" || OPERATORS.includes(display)) ?\r\n             \"0\" : \r\n             display.concat(\"0\");\r\n\r\n            // if prev input was operator, add to stack\r\n            const newStack = OPERATORS.includes(display) ? \r\n            [...opStack, display] :\r\n            opStack;\r\n\r\n            dispatch(Creators.handleZero(newDisplay, newFormula, newStack));\r\n        }\r\n    };\r\n}\r\n\r\nconst handleOperator = (value) => {\r\n    return (dispatch, getState) => {\r\n        const outputQueue = getState().home.outputQueue;\r\n        const formula = getState().home.formulaDisplay;\r\n        const display = getState().home.display;\r\n        const isEvaluated = getState().home.evaluated;\r\n\r\n        // if prev input was number\r\n        const newQueue = !OPERATORS.includes(display) ?\r\n            // if its not the first number and there are two operands before it\r\n            formula.length > 1 && formula[formula.length - display.length - 1] === \"-\" && \r\n            OPERATORS.includes(formula[formula.length - display.length - 2]) ?\r\n            // add negative number to queue\r\n            [...outputQueue, \"-\".concat(display)] :\r\n            [...outputQueue, display] :\r\n            outputQueue;\r\n\r\n        let newFormula = '';\r\n\r\n        if (isEvaluated) {\r\n            // if formula has been evaluated continue it with the prev answer and new operator\r\n            newFormula = getState().home.prevAns + value;\r\n        } else {\r\n            // allow negative numbers by adding negative sign after other operators\r\n            // double negation disallowed\r\n            if (value === \"-\" && formula[formula.length - 1] !== \"-\") {\r\n                newFormula = formula.concat(value);\r\n            } else {\r\n                newFormula = OPERATORS.includes(formula[formula.length - 1]) ?\r\n                OPERATORS.includes(formula[formula.length - 2]) ?\r\n                // if there were two operators previously remove both and replace with current\r\n                formula.slice(0, -2).concat(value) :\r\n                // else remove the one operator and replace with current\r\n                formula.slice(0, -1).concat(value) :\r\n                // if no operators previously, add current\r\n                formula.concat(value);\r\n            }\r\n        }\r\n        \r\n        dispatch(Creators.handleOperator(value, newFormula, newQueue));\r\n    };\r\n}\r\n\r\nconst handleOperand = (value) => {\r\n    return (dispatch, getState) => {\r\n        const isEvaluated = getState().home.evaluated;\r\n        const formula = getState().home.formulaDisplay;\r\n        const display = getState().home.display;\r\n        const opStack = getState().home.opStack;\r\n\r\n        if (display.length > 20) {\r\n            return;\r\n        }\r\n\r\n        // if previous evaluated start new display\r\n        const newDisplay = isEvaluated ? value : \r\n            // if prev input was 0 or an operator, replace with current number\r\n            (display === \"0\" || OPERATORS.includes(display)) ? \r\n            value : \r\n            // else concat number to display\r\n            display.concat(value);\r\n\r\n        // previous evaluated or formula is 0 replace start new formula\r\n        const newFormula = isEvaluated || formula === \"0\" ? value : \r\n        // if initially performing operation with 0, replace with new value\r\n        OPERATORS.includes(formula[formula.length - 2]) && formula[formula.length - 1] === \"0\" ?\r\n        formula.slice(0, -1).concat(value) :\r\n        formula.concat(value);\r\n\r\n\r\n        const newStack = OPERATORS.includes(formula[formula.length - 1]) ?\r\n            OPERATORS.includes(formula[formula.length - 2]) ?\r\n            // ignore negative sign if there is one and add the prev operator to stack\r\n            [...opStack, formula[formula.length - 2]] :\r\n            [...opStack, formula[formula.length - 1]] :\r\n            opStack;\r\n\r\n        dispatch(Creators.handleOperand(newDisplay, newFormula, newStack));\r\n    };\r\n}\r\n\r\nexport default {\r\n    handleZero,\r\n    handleOperator,\r\n    handleOperand,\r\n    handleDecimal,\r\n    evaluate,\r\n    clear\r\n};","import homeReducer from './reducers';\r\nexport { default as homeOperations} from './operations';\r\nexport { default as homeTypes } from './types';\r\nexport default homeReducer; ","import { connect } from 'react-redux';\r\nimport CalculatorComponent from './CalculatorComponent';\r\nimport { homeOperations } from './duck';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        display:  state.home.display,\r\n        formulaDisplay: state.home.formulaDisplay\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleOperand: (value) => {\r\n            dispatch(homeOperations.handleOperand(value));\r\n        },\r\n        handleOperator: (value) => {\r\n            dispatch(homeOperations.handleOperator(value));\r\n        },\r\n        evaluate: () => {\r\n            dispatch(homeOperations.evaluate());\r\n        },\r\n        clear: () => {\r\n            dispatch(homeOperations.clear());\r\n        },\r\n        handleZero: () => {\r\n            dispatch(homeOperations.handleZero());\r\n        },\r\n        handleDecimal: () => {\r\n            dispatch(homeOperations.handleDecimal());\r\n        }\r\n    };\r\n}\r\n\r\nconst CalculatorContainer = connect(mapStateToProps, mapDispatchToProps)(CalculatorComponent);\r\nexport default CalculatorContainer;","import React from 'react';\r\nimport Calculator from './CalculatorContainer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDivide, faEquals, faMinus, faPlus, faWaveSquare,\r\n   faSquareRootAlt, faLessThanEqual, faGreaterThan, \r\n   faNotEqual, faSubscript } from '@fortawesome/free-solid-svg-icons';\r\nimport './app.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"icons\">\r\n        <FontAwesomeIcon id=\"minus-icon\" icon={faMinus} />\r\n        <FontAwesomeIcon id=\"plus-icon\" icon={faPlus} />\r\n        <FontAwesomeIcon id=\"divide-icon\" icon={faDivide} />\r\n        <FontAwesomeIcon id=\"equals-icon\" icon={faEquals} />\r\n        <FontAwesomeIcon id=\"wave-square-icon\" icon={faWaveSquare} />\r\n        <FontAwesomeIcon id=\"sqrt-icon\" icon={faSquareRootAlt} />\r\n        <FontAwesomeIcon id=\"gt-icon\" icon={faGreaterThan} />\r\n        <FontAwesomeIcon id=\"lt-icon\" icon={faLessThanEqual} />\r\n        <FontAwesomeIcon id=\"not-equals-icon\" icon={faNotEqual} />\r\n        <FontAwesomeIcon id=\"subscript-icon\" icon={faSubscript} />\r\n      </div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport homeReducer from './app/duck';\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}